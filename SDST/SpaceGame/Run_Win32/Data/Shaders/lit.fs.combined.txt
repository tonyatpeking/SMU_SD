#version 420 core
#define MAX_LIGHTS   (8)

layout(binding=1, std140) uniform uboTimeClock
{
	float GAME_DELTA_TIME;
	float GAME_TIME;
	float SYSTEM_DELTA_TIME;
	float SYSTEM_TIME;
};

layout(binding=2, std140) uniform uboCamera
{
	mat4 VIEW;
	mat4 PROJECTION;
	mat4 VP;
	vec3 CAMERA_POSITION;
	float PAD_CAM_0;
};

layout(binding=3, std140) uniform uboInstance
{
	mat4 MODEL;
	mat4 MVP;
	vec4 TINT;
	float SPECULAR_AMOUNT;
	float SPECULAR_POWER;
	float PAD_INST_0;
	float PAD_INST_1;
};

layout(binding=5, std140) uniform uboGlobal
{
	vec2 WINDOW_SIZE;
};

struct Light
{
	vec4 color; // alpha is intensity

    vec3 position;
    float isPointLight;  // 1 for point light, 0 for directional light

	vec3 direction; // the direction the light is pointing
    float sourceRadius; // the physical size of the light, affects attenuation

    float coneInnerDot;
    float coneOuterDot;
    float pad1;
    float pad0;
};

//MAX_LIGHTS can be set in cpp with define injection
#ifndef MAX_LIGHTS
#define MAX_LIGHTS (8)
#endif

layout(binding=6, std140) uniform uboLights
{
	vec4 AMBIENT;  // xyz color, w intensity
	Light LIGHTS[MAX_LIGHTS];
};                                                          
//#include "Data/Shaders/Includes/RendererUniformBlocks.glsl"
#define RangeMap(val, inStart, inEnd, outStart, outEnd) \
(((val) - (inStart)) / ((inEnd) - (inStart)) * ((outEnd) - (outStart)) + (outStart))


#define RangeMapTo01(val, inStart, inEnd) \
(((val) - (inStart)) / ((inEnd) - (inStart)))


#define RangeMapFrom01(val, outStart, outEnd) \
(((val) * ((outEnd) - (outStart)) + (outStart))

           
//#include "Data/Shaders/Includes/Math.glsl"
vec3 ComputeDiffuse( vec3 dirToLight, vec4 lightColor, vec3 fragNormal )
{
    float dot3 = dot(dirToLight, fragNormal);
    return max( dot3, 0 ) * lightColor.xyz;
}

vec3 ComputeSpecular( vec3 dirToLight, vec4 lightColor,
    vec3 camDir, vec3 fragNormal, float specAmount, float specPower )
{
    vec3 reflectDir = reflect( -dirToLight, fragNormal );
    float dotReflect = max( 0, dot( camDir, reflectDir ) );
    float specFactor = specAmount * pow( dotReflect, specPower );
    return specFactor * lightColor.xyz;
}

//from https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
float ComputeAttenuation( float lightDist, float sourceRadius )
{
    float temp = lightDist / sourceRadius + 1;
    return 1.0f / (temp * temp);
}

vec4 NormalToColor( vec3 normal )
{
    // maps -1,1 to 0,1
    return vec4( normal * 0.5 + 0.5, 1 );
}                          
//#include "Data/Shaders/Includes/LightFunctions.glsl"

    
//#include "Data/Shaders/Includes/Common.glsl"

// Textures
layout(binding = 0) uniform sampler2D gTexDiffuse;
layout(binding = 1) uniform sampler2D gTexNormal;


// Attributes ============================================
in vec2 passUV;
in vec4 passColor;
in vec3 passWorldPos;
in vec3 passWorldNormal;
in vec3 passWorldTangent;
in vec3 passWorldBitangent;


out vec4 outColor;

// Entry Point ===========================================
void main( void )
{

    // normalized window coords
    vec2 fragCoordNorm = gl_FragCoord.xy / WINDOW_SIZE;


    // Interpolation is linear, so normals become not normal
    // over a surface, so renormalize it.
    vec3 vertWorldNormal = normalize(passWorldNormal);
    vec3 vertWorldTangent = normalize(passWorldTangent);
    vec3 vertWorldBitangent = normalize(passWorldBitangent);

    mat3 surfaceToWorld = mat3( vertWorldTangent, vertWorldBitangent, vertWorldNormal );

    // Color of this surface
    vec4 surfaceColor = texture( gTexDiffuse, passUV ) * passColor;
    vec3 surfaceNormalColor = texture( gTexNormal, passUV ).xyz;

    vec3 fragNormal = normalize( surfaceNormalColor * vec3( 2.0f, 2.0f, 1.0f ) + vec3( -1.0f, -1.0f, 0.0f ) );
    vec3 fragWorldNormal = surfaceToWorld * fragNormal;

    // used in final lighting equation to compute
    // final color of output - calculated from the light
    vec3 diffuseLight = vec3(0); // How much light is hitting the surface
    vec3 specLight = vec3(0);  // How much light is reflected back

    // vectors we'll use
    vec3 camDir = normalize(CAMERA_POSITION - passWorldPos); // direction to the camera

    diffuseLight = AMBIENT.xyz * AMBIENT.w;



for ( int lightIdx = 0; lightIdx < MAX_LIGHTS; ++lightIdx)
{
    vec3 dirPointLight = LIGHTS[lightIdx].position - passWorldPos;
    vec3 dirDirectionalLight = -LIGHTS[lightIdx].direction;
    vec3 dirToLight = normalize( mix( dirDirectionalLight, dirPointLight, LIGHTS[lightIdx].isPointLight )); // direction to light
    float lightDist = length(LIGHTS[lightIdx].position - passWorldPos);
    float attenuation = ComputeAttenuation(lightDist, LIGHTS[lightIdx].sourceRadius)
        * LIGHTS[lightIdx].color.w;
    float coneDot = dot( dirToLight, dirDirectionalLight );
    float spotlightDropoff = smoothstep( LIGHTS[lightIdx].coneOuterDot, LIGHTS[lightIdx].coneInnerDot, coneDot );

    diffuseLight += ComputeDiffuse( dirToLight, LIGHTS[lightIdx].color, fragWorldNormal )
        * attenuation * spotlightDropoff;

    specLight += ComputeSpecular( dirToLight, LIGHTS[lightIdx].color, camDir, fragWorldNormal,
        SPECULAR_AMOUNT, SPECULAR_POWER ) * attenuation * spotlightDropoff;
}


    // Surface lighting should never blow out surface. It is either fully lit or not
    diffuseLight = clamp(diffuseLight, vec3(0), vec3(1));

    // Reflected light on the other hand CAN exceed one (used for bloom)

    // Calculate final color; note, it should not change the alpha... so...
    // Alpha of one for surface light as it is multiplied in,
    // and 0 for specular since it is added in.
    vec4 finalColor = vec4(diffuseLight, 1) * surfaceColor + vec4(specLight, 0);
    // Reclamp so that we're in a valid color range.  May want to save off overflow
    // if doing bloom.
    finalColor = clamp(finalColor, vec4(0), vec4(1) );

    outColor = finalColor;
}                                                                                        

