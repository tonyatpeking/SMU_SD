#pragma once

#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include "Engine/Core/ErrorUtils.hpp"
#include "Engine/String/StringUtils.hpp"


// This is an easy to use enum macro that allows automatic string conversion
// inspired by https://stackoverflow.com/questions/201593/is-there-a-simple-way-to-convert-c-enum-to-string#201792
// Example:
/*
Define the enum like this:

SMART_ENUM(
    TypeOfFruit,

    INVALID = -1,
    APPLE,
    PEAR,
    BANANA,
    // COUNT  // this is automatically generated by the macro, only works if enums start from 0 and are contiguous, if not, use ::AllValues().size()
    // ENUM_NOT_FOUND // this is automatically generated by the macro
);

// Use it like you would any normal enum class
TypeOfFruit apple = TypeOfFruit::APPLE;

// int casts are not necessary
int appleInt = apple;

// To and from string, with static and non-static versions, case sensitive
String str1 = apple.ToString();
String str2 = TypeOfFruit::ToString(apple);
TypeOfFruit pear = TypeOfFruit::FromString("PEAR");

// If string cannot be found, FromString will return TypeOfFruit::ENUM_NOT_FOUND
TypeOfFruit notFound = TypeOfFruit::FromString("CANDY");

// For loop with AllValues(), this does not include the auto-generated COUNT and ENUM_NOT_FOUND
// The following code will loop through INVALID = -1, APPLE = 0, PEAR = 1, BANANA = 2
for( TypeOfFruit fruit : TypeOfFruit::AllValues() )
    int doSomething = fruit;
*/


#define SMART_ENUM( EnumName, ...)                                                                                              \
class EnumName                                                                                                                  \
{                                                                                                                               \
public:                                                                                                                         \
    EnumName() : m_value( 0 ) {}                                                                                                \
    EnumName( int intValue ) : m_value( intValue ) {}                                                                           \
                                                                                                                                \
    /*This allows the class to be treated like an enum/int in code*/                                                            \
    operator int() const { return m_value; }                                                                                    \
                                                                                                                                \
    /* Store the enum so that EnumName::SOMETHING will return the enum */                                                       \
    enum { __VA_ARGS__, COUNT, ENUM_NOT_FOUND };                                                                                \
                                                                                                                                \
    static std::vector<EnumName>& AllValues() {                                                                                 \
        static std::vector<EnumName> allValues;                                                                                 \
        if( (int) allValues.size() == 0 )                                                                                             \
            InitAllValues( allValues );                                                                                         \
        return allValues;                                                                                                       \
    }                                                                                                                           \
                                                                                                                                \
    static String ToString( int intValue )                                                                                 \
    {                                                                                                                           \
        return StringMap()[intValue];                                                                                           \
    }                                                                                                                           \
                                                                                                                                \
    String ToString( void ) const                                                                                          \
    {                                                                                                                           \
        return ToString( m_value );                                                                                             \
    }                                                                                                                           \
                                                                                                                                \
    static EnumName FromString( const String& str )                                                                        \
    {                                                                                                                           \
        auto it = find_if( StringMap().begin(), StringMap().end(),                                                              \
                           [str]( const std::pair<int, String>& pair ) { return pair.second == str; } );                   \
        if( it == StringMap().end() )                                                                                           \
        {                                                                                                                       \
            String errEnumName = #EnumName;                                                                                \
            LOG_WARNING( errEnumName + "::" + str + " not defined" );                                                           \
            return EnumName( (int) StringMap().size() - 1 );                                                                          \
        }                                                                                                                       \
        else                                                                                                                    \
        {                                                                                                                       \
            return EnumName( it->first );                                                                                       \
        }                                                                                                                       \
    }                                                                                                                           \
                                                                                                                                \
    bool operator<( const EnumName other ) const { return (int) *this < (int) other; }                                          \
                                                                                                                                \
private:                                                                                                                        \
                                                                                                                                \
    static void InitStringMap( std::map<int, String>& stringMap )                                                          \
    {                                                                                                                           \
        String  enumString = #__VA_ARGS__;                                                                                 \
        enumString += " ,COUNT, ENUM_NOT_FOUND";                                                                                       \
        ParseStatus parseStatus = StringUtils::ParseEnumStringToMap( enumString, stringMap );                                   \
        if( parseStatus != ParseStatus::PARSE_SUCCESS )                                                                         \
            LOG_WARNING( "Failed to parse enum string: \n" + enumString );                                                      \
    }                                                                                                                           \
                                                                                                                                \
    static std::map<int, String>& StringMap() {                                                                            \
        static std::map<int, String> stringMap;                                                                            \
        if( (int) stringMap.size() == 0 )                                                                                             \
            InitStringMap( stringMap );                                                                                         \
        return stringMap;                                                                                                       \
    }                                                                                                                           \
                                                                                                                                \
    static void InitAllValues( std::vector<EnumName>& allValues )                                                               \
    {                                                                                                                           \
        const auto& stringMap = StringMap();                                                                                    \
        for( const auto& pair : stringMap )                                                                                     \
        {                                                                                                                       \
            if( pair.first != ENUM_NOT_FOUND && pair.first != COUNT )                                                                                  \
                allValues.push_back( EnumName( pair.first ) );                                                                  \
        }                                                                                                                       \
    }                                                                                                                           \
                                                                                                                                \
    int m_value;                                                                                                                \
};
